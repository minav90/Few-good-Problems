import java.util.ArrayList;

public class BlocksWorld {

	public static void main(String[] args) {
		
		Node intialState =  new Node(intialState());
		intialState.setDistFromRoot(0);
		
	}

	private static ArrayList<ArrayList<SubNode>> intialState() {
		ArrayList<SubNode> target = new ArrayList<SubNode>();
		target.add(new SubNode("D", false));
		ArrayList<SubNode> arr1 = new ArrayList<SubNode>();
		arr1.add(new SubNode("C", false));
		arr1.add(new SubNode("A", false));
		ArrayList<SubNode> arr2 = new ArrayList<SubNode>();
		arr2.add(new SubNode("B", false));
		arr2.add(new SubNode("E", false));
		ArrayList<ArrayList<SubNode>> state = new ArrayList<ArrayList<SubNode>>();
        state.add(target);
        state.add(arr1);
        state.add(arr2);
		return state;
	}
	
	private static int computeHeuristicVal(Node state,int correctVal)
	{
		int finalHeuristic = 0;
        int carry = 0;
        ArrayList<ArrayList<SubNode>> stacks = state.getState();
		int number_of_element_on_targetStack = stacks.get(0).size();
        if(number_of_element_on_targetStack == correctVal)
        {
        	carry = 0;
        }
        else
        {
        	carry = number_of_element_on_targetStack - correctVal;
        }
        for(int i=0;i<stacks.size();i++)
        {
        	ArrayList<SubNode> stack = stacks.get(i);
			for(int j=0;j<stack.size();j++)
        	{
			     
        		 if(stack.get(j).isAtCorrectPosition())
        		 {
        			 finalHeuristic =+ 0;
        		 }
        		 else
        		 {
        			 int previousElement = (int)stack.get(j).getVal().charAt(0)-65;
        			 if(j==stack.size()-1) 
                     {
                    	 finalHeuristic =+ 1+carry+(previousElement-correctVal);
                     }
        		 }
        	}
        }
        
		
		return 0;
	}
	
	
}
