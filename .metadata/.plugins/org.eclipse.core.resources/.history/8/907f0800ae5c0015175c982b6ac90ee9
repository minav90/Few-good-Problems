import java.util.Comparator;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;

import javax.lang.model.element.Element;

public class GreedyBFS {


	
	PriorityQueue<Node> queue = new PriorityQueue<>(1,
			new Comparator<Node>() {
				@Override
				public int compare(Node o1, Node o2) {
					if(o1.getHeur() > o2.getHeur()) return  1;
					  else if(o1.getHeur() == o2.getHeur()) return 0;
					  else return -1;
				}
			});
	
	int vertices_visited = 1;

	public boolean search(Node root, int data) {
		root.depth = 0;
		queue.add(root);
		Set<Node> explored = new HashSet<Node>();
		int iterations = 1;
		int max_frontier = 0;
		while (!queue.isEmpty()) {
			Node element = queue.poll();
			max_frontier = max_frontier > queue.size() ? max_frontier : queue.size();
			if (!explored.contains(element)) {
				if (element.id == data) {
					printResult(element, element.depth, iterations, max_frontier, vertices_visited);
					return true;
				}
				addChildren(element, explored);
				explored.add(element);
			}
			iterations++;
		}
		System.out.println("Goal state cannot be reached from start state");
		return false;
	}

	private void printResult(Node element, int depth, int iterations, int max_frontier, int vertices_visited) {
		System.out.println("Search Algorithm = GreedyBFS");
		System.out.println("-------------------------");
		//printElementsInThePathFromGoalToStart(element);
		System.out.println("Total Iterations = " + iterations);
		System.out.println("Max Frontier     = " + max_frontier);
		System.out.println("Vertices Visited = " + vertices_visited);
		System.out.println("path Length      = " + depth);
	}

	private void printElementsInThePathFromGoalToStart(Node element) {
		System.out.println("Goal State = "+ element.id+ " X=" + element.getxCor() + " Y=" + element.getyCor());
		element = element.parent;
		while (element.parent!=null) {
			System.out.println("Vertice " + element.getId() + " X=" + element.getxCor() + " Y=" + element.getyCor());
			element = element.parent;
		}
		System.out.println("Start State = "+ element.id+ " X=" + element.getxCor() + " Y=" + element.getyCor());
		System.out.println("                ");
	}

	private void addChildren(Node element, Set<Node> explored) {

		for (Node successor : element.getSuccessors()) {
			if (!explored.contains(successor) && !queue.contains(successor)) {
				successor.depth = element.depth + 1;
				successor.parent = element;
				queue.offer(successor);
				vertices_visited++;
			}
		}
	}
}
