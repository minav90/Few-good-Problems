package com.track.Controller;

import java.sql.DriverManager;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.Request;
import javax.ws.rs.core.UriInfo;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;
import com.track.model.Location;

@Path("/location")
public class LocationResource {
 
    private final static String NAME = "Name";
    private final static String ID = "Id";
    private final static String LATITUDE = "Latitude";
    private final static String LONGITUDE = "Longitude";
         
    private Location location = new Location("1", "Minav", "26.265", "33.254");
     
    // The @Context annotation allows us to have certain contextual objects
    // injected into this class.
    // UriInfo object allows us to get URI information (no kidding).
    @Context
    UriInfo uriInfo;
 
    // Another "injected" object. This allows us to use the information that's
    // part of any incoming request.
    // We could, for example, get header information, or the requestor's address.
    @Context
    Request request;
     
    // Basic "is the service running" test
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String respondAsReady() {
    	System.out.println("Demo is ready");
        return "Demo service is ready!";
    }
 
    @GET
    @Path("sample")
    @Produces(MediaType.APPLICATION_JSON)
    public Location getLocation() {
         
        System.out.println("Returning sample person: " + location.getLatitude() + " " + location.getLongitude());
         
        return location;
    }
         
    // Use data from the client source to create a new Person object, returned in JSON format.  
    @POST
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Produces(MediaType.APPLICATION_JSON)
    public Location postLocation(
            MultivaluedMap<String, String> locationParams
            ) {
         
    	String id = locationParams.getFirst(ID);
        String name = locationParams.getFirst(NAME);
        String latitude = locationParams.getFirst(LATITUDE);
        String longitude = locationParams.getFirst(LONGITUDE);
         
        System.out.println("Storing posted " + id + " " + name + "  " + latitude + " "+ longitude);
        
        Class.forName("com.mysql.jdbc.Driver");

		Connection con = (Connection) DriverManager.getConnection(
				"jdbc:mysql://localhost:3306/TrackME", "root", "root");
		System.out.println("connected");
		if (con != null) {
			System.out.println("connected");
			Statement st = (Statement) con.createStatement();
			ResultSet rs = st.executeQuery("SELECT * FROM MessageDetail where Mobile="
					+ Phonenumber);
			// rs = st.executeQuery("SELECT * FROM MessageDetail");
			if (rs.next()) {
				// ResultSet is empty
				String Mobile = rs.getString(1);
				String Message = rs.getString(2);
				String image_path = rs.getString(3);
				String Name1 = rs.getString(5);

				person.setMobile(Mobile);
				person.setmesgrecv(Message);
				person.setimage(image_path);
				person.setName(Name1);

				System.out
						.println("message received: "
								+ person.getmesgrecv() + "  "
								+ person.getimage() + " "
								+ person.getMobile() + " "
								+ person.getName());
				stmt = con
						.prepareStatement("DELETE FROM MessageDetail WHERE Mobile=?");
				stmt.setString(1, Phonenumber);

				stmt.executeUpdate();

			}

        
        
        
        location.setId(id);
        location.setName(name);
        location.setLatitude(latitude);
        location.setLongitude(longitude);
        
         
        System.out.println("Location info: " + location.getId() + " " + location.getName() + " " + location.getLatitude()+ " "+ location.getLongitude());
         
        return location;
                         
    }
}
